#!/usr/bin/env python3
#This is a python code used to extract data for 'XLAT','XLONG','XTIME' and 'CLDFRA' from WRF output files which are in netCDF format so as to obtain a map of longitude against latitude for cloud fraction

#Import libraries
import netCDF4
import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.basemap import Basemap

#Opening WRF output file which is in netcdf format
f = netCDF4.Dataset('/home/neda/wrfv4/WRF/test/em_real/wrfout_d05_2021-10-01_00:00:00')
print(f)

#get all variable names
print(f.variables.keys())

for d in f.dimensions.items():
  print(d)

#Retrieving data for latitude
lat_cls = f.variables['XLAT']
lat = lat_cls[:]

print("type(lat_cls):")
print(type(lat_cls))
print("lat_cls.shape:")
print(lat_cls.shape)
print("lat_cls.dtype:")
print(lat_cls.dtype)
print("lat_cls:")
print(lat_cls)
print("lat:")
print(lat)
print()

#Slicing 3D array of (29, 111, 111). There are 29 elements. Here we choose the third one which has an index of 2
latitude =  lat[2, :, :]
print("latitude.shape")
print(latitude.shape)
print(latitude)

#Retrieving data for longitude
lon_cls = f.variables['XLONG']
lon = lon_cls[:]

print("type(lon_cls):")
print(type(lon_cls))
print("lon_cls.shape:")
print(lon_cls.shape)
print("lon_cls.dtype:")
print(lon_cls.dtype)
print("lon_cls:")
print(lon_cls)
print("lon:")
print(lon)
print()

#Slicing 3D array of (29, 111, 111). There are 29 elements. Here we choose the third one which has an index of 2
longitude =  lon[2, :, :]
print("longitude.shape")
print(longitude.shape)
print(longitude)

#Retrieving data for time
time_cls = f.variables['XTIME']
time = time_cls[:]

print("type(time_cls):")
print(type(time_cls))
print("time_cls.shape:")
print(time_cls.shape)
print("time_cls.dtype:")
print(time_cls.dtype)
print("time_cls:")
print(time_cls)
print("time:")
print(time)
print()

#Retrieving data for cloud fraction
cloud_fra_cls = f.variables['CLDFRA']
cloud_fra = cloud_fra_cls[:]

print("type(cloud_fra_cls):")
print(type(cloud_fra_cls))
print("cloud_fra_cls.shape:")
print(cloud_fra_cls.shape)
print("cloud_fra_cls.dimensions:")
print(cloud_fra_cls.dimensions)
print("cloud_fra_cls.dtype:")
print(cloud_fra_cls.dtype)
print("cloud_fra_cls:")
print(cloud_fra_cls)
print("cloud_fra.shape:")
print(cloud_fra.shape)
print("cloud_fra:")
print(cloud_fra)
print()

#Cloud fraction has shape (29, 37, 111, 111)
### Day 1
sum1 = np.zeros((111, 111))
print("Computing cloud fraction for Day 1 ...")
for m in range(1,5):
    # we are selecting a specific time stamp of m+1 at index m
    print("Slicing timestamp {:d} for Day 1.".format(m))
    cloud_fraction = cloud_fra[m, :, :, :]

    for i in range(37):
        for j in range(111):
            for k in range(111):
                sum1[j][k] = sum1[j][k] + cloud_fraction[i][j][k]

fig1 = plt.figure(1)

#llcrnrlat: lower left corner latitude
#llcrnrlon: lower left corner longitude
#urcrnrlat: upper right corner latitude
#urcrnrlon: upper right corner longitude
#lat_ts: true latitude value
map = Basemap(projection='merc', llcrnrlat=latitude[0,0], llcrnrlon=longitude[0,0], urcrnrlat=latitude[-1, -1], urcrnrlon=longitude[-1, -1], lat_ts=latitude[latitude.shape[0]//2, 0], resolution='f')

map.drawcoastlines(color='white', linewidth=2.0)
map.fillcontinents(color='white',lake_color='white')

# draw parallels (latitude) and meridians(longitude).
map.drawparallels(np.arange(-30.0,-10.0,0.5), color='white', linewidth=1.0, dashes=[1,0], labels=[1,1,0,0])
map.drawmeridians(np.arange(45.0,70.0,0.5), color='white', linewidth=1.0, dashes=[1,0], labels=[0,0,1,1])
map.drawmapboundary(fill_color='white')

map.pcolormesh(longitude, latitude, sum1, latlon=True, cmap='turbo' )
map.colorbar(pad=0.5)

print()
###

### Day 2
sum2 = np.zeros((111, 111))
print("Computing cloud fraction for Day 2 ...")
for m in range(5,9):
    # we are selecting a specific time stamp of m+1 at index m
    print("Slicing timestamp {:d} for Day 2.".format(m))
    cloud_fraction = cloud_fra[m, :, :, :]

    for i in range(37):
        for j in range(111):
            for k in range(111):
                sum2[j][k] = sum2[j][k] + cloud_fraction[i][j][k]

fig2 = plt.figure(2)

#llcrnrlat: lower left corner latitude
#llcrnrlon: lower left corner longitude
#urcrnrlat: upper right corner latitude
#urcrnrlon: upper right corner longitude
#lat_ts: true latitude value
map = Basemap(projection='merc', llcrnrlat=latitude[0,0], llcrnrlon=longitude[0,0], urcrnrlat=latitude[-1, -1], urcrnrlon=longitude[-1, -1], lat_ts=latitude[latitude.shape[0]//2, 0], resolution='f')

map.drawcoastlines(color='white', linewidth=2.0)
map.fillcontinents(color='white',lake_color='white')

# draw parallels (latitude) and meridians(longitude).
map.drawparallels(np.arange(-30.0,-10.0,0.5), color='white', linewidth=1.0, dashes=[1,0], labels=[1,1,0,0])
map.drawmeridians(np.arange(45.0,70.0,0.5), color='white', linewidth=1.0, dashes=[1,0], labels=[0,0,1,1])
map.drawmapboundary(fill_color='white')

map.pcolormesh(longitude, latitude, sum2, latlon=True, cmap='turbo' )
map.colorbar(pad=0.5)

print()
###

### Day 3
sum3 = np.zeros((111, 111))
print("Computing cloud fraction for Day 3 ...")
for m in range(9,13):
    # we are selecting a specific time stamp of m+1 at index m
    print("Slicing timestamp {:d} for Day 3.".format(m))
    cloud_fraction = cloud_fra[m, :, :, :]

    for i in range(37):
        for j in range(111):
            for k in range(111):
                sum3[j][k] = sum3[j][k] + cloud_fraction[i][j][k]

fig3 = plt.figure(3)

#llcrnrlat: lower left corner latitude
#llcrnrlon: lower left corner longitude
#urcrnrlat: upper right corner latitude
#urcrnrlon: upper right corner longitude
#lat_ts: true latitude value
map = Basemap(projection='merc', llcrnrlat=latitude[0,0], llcrnrlon=longitude[0,0], urcrnrlat=latitude[-1, -1], urcrnrlon=longitude[-1, -1], lat_ts=latitude[latitude.shape[0]//2, 0], resolution='f')

map.drawcoastlines(color='white', linewidth=2.0)
map.fillcontinents(color='white',lake_color='white')

# draw parallels (latitude) and meridians(longitude).
map.drawparallels(np.arange(-30.0,-10.0,0.5), color='white', linewidth=1.0, dashes=[1,0], labels=[1,1,0,0])
map.drawmeridians(np.arange(45.0,70.0,0.5), color='white', linewidth=1.0, dashes=[1,0], labels=[0,0,1,1])
map.drawmapboundary(fill_color='white')

map.pcolormesh(longitude, latitude, sum3, latlon=True, cmap='turbo' )
map.colorbar(pad=0.5)

print()
###

### Day 4
sum4 = np.zeros((111, 111))
print("Computing cloud fraction for Day 4 ...")
for m in range(13,17):
    # we are selecting a specific time stamp of m+1 at index m
    print("Slicing timestamp {:d} for Day 4.".format(m))
    cloud_fraction = cloud_fra[m, :, :, :]

    for i in range(37):
        for j in range(111):
            for k in range(111):
                sum4[j][k] = sum4[j][k] + cloud_fraction[i][j][k]

fig4 = plt.figure(4)

#llcrnrlat: lower left corner latitude
#llcrnrlon: lower left corner longitude
#urcrnrlat: upper right corner latitude
#urcrnrlon: upper right corner longitude
#lat_ts: true latitude value
map = Basemap(projection='merc', llcrnrlat=latitude[0,0], llcrnrlon=longitude[0,0], urcrnrlat=latitude[-1, -1], urcrnrlon=longitude[-1, -1], lat_ts=latitude[latitude.shape[0]//2, 0], resolution='f')

map.drawcoastlines(color='white', linewidth=2.0)
map.fillcontinents(color='white',lake_color='white')

# draw parallels (latitude) and meridians(longitude).
map.drawparallels(np.arange(-30.0,-10.0,0.5), color='white', linewidth=1.0, dashes=[1,0], labels=[1,1,0,0])
map.drawmeridians(np.arange(45.0,70.0,0.5), color='white', linewidth=1.0, dashes=[1,0], labels=[0,0,1,1])
map.drawmapboundary(fill_color='white')

map.pcolormesh(longitude, latitude, sum4, latlon=True, cmap='turbo' )
map.colorbar(pad=0.5)

print()
###

### Day 5
sum5 = np.zeros((111, 111))
print("Computing cloud fraction for Day 5 ...")
for m in range(17,21):
    # we are selecting a specific time stamp of m+1 at index m
    print("Slicing timestamp {:d} for Day 5.".format(m))
    cloud_fraction = cloud_fra[m, :, :, :]

    for i in range(37):
        for j in range(111):
            for k in range(111):
                sum5[j][k] = sum5[j][k] + cloud_fraction[i][j][k]

fig5 = plt.figure(5)

#llcrnrlat: lower left corner latitude
#llcrnrlon: lower left corner longitude
#urcrnrlat: upper right corner latitude
#urcrnrlon: upper right corner longitude
#lat_ts: true latitude value
map = Basemap(projection='merc', llcrnrlat=latitude[0,0], llcrnrlon=longitude[0,0], urcrnrlat=latitude[-1, -1], urcrnrlon=longitude[-1, -1], lat_ts=latitude[latitude.shape[0]//2, 0], resolution='f')

map.drawcoastlines(color='white', linewidth=2.0)
map.fillcontinents(color='white',lake_color='white')

# draw parallels (latitude) and meridians(longitude).
map.drawparallels(np.arange(-30.0,-10.0,0.5), color='white', linewidth=1.0, dashes=[1,0], labels=[1,1,0,0])
map.drawmeridians(np.arange(45.0,70.0,0.5), color='white', linewidth=1.0, dashes=[1,0], labels=[0,0,1,1])
map.drawmapboundary(fill_color='white')

map.pcolormesh(longitude, latitude, sum5, latlon=True, cmap='turbo' )
map.colorbar(pad=0.5)

print()
###

### Day 6
sum6 = np.zeros((111, 111))
print("Computing cloud fraction for Day 6 ...")
for m in range(21,25):
    # we are selecting a specific time stamp of m+1 at index m
    print("Slicing timestamp {:d} for Day 6.".format(m))
    cloud_fraction = cloud_fra[m, :, :, :]

    for i in range(37):
        for j in range(111):
            for k in range(111):
                sum6[j][k] = sum6[j][k] + cloud_fraction[i][j][k]

fig6 = plt.figure(6)

#llcrnrlat: lower left corner latitude
#llcrnrlon: lower left corner longitude
#urcrnrlat: upper right corner latitude
#urcrnrlon: upper right corner longitude
#lat_ts: true latitude value
map = Basemap(projection='merc', llcrnrlat=latitude[0,0], llcrnrlon=longitude[0,0], urcrnrlat=latitude[-1, -1], urcrnrlon=longitude[-1, -1], lat_ts=latitude[latitude.shape[0]//2, 0], resolution='f')

map.drawcoastlines(color='white', linewidth=2.0)
map.fillcontinents(color='white',lake_color='white')

# draw parallels (latitude) and meridians(longitude).
map.drawparallels(np.arange(-30.0,-10.0,0.5), color='white', linewidth=1.0, dashes=[1,0], labels=[1,1,0,0])
map.drawmeridians(np.arange(45.0,70.0,0.5), color='white', linewidth=1.0, dashes=[1,0], labels=[0,0,1,1])
map.drawmapboundary(fill_color='white')

map.pcolormesh(longitude, latitude, sum6, latlon=True, cmap='turbo' )
map.colorbar(pad=0.5)

print()
###

### Day 7
sum7 = np.zeros((111, 111))
print("Computing cloud fraction for Day 7 ...")
for m in range(25,29):
    # we are selecting a specific time stamp of m+1 at index m
    print("Slicing timestamp {:d} for Day 7.".format(m))
    cloud_fraction = cloud_fra[m, :, :, :]

    for i in range(37):
        for j in range(111):
            for k in range(111):
                sum7[j][k] = sum7[j][k] + cloud_fraction[i][j][k]

fig7 = plt.figure(7)

#llcrnrlat: lower left corner latitude
#llcrnrlon: lower left corner longitude
#urcrnrlat: upper right corner latitude
#urcrnrlon: upper right corner longitude
#lat_ts: true latitude value
map = Basemap(projection='merc', llcrnrlat=latitude[0,0], llcrnrlon=longitude[0,0], urcrnrlat=latitude[-1, -1], urcrnrlon=longitude[-1, -1], lat_ts=latitude[latitude.shape[0]//2, 0], resolution='f')

map.drawcoastlines(color='white', linewidth=2.0)
map.fillcontinents(color='white',lake_color='white')

# draw parallels (latitude) and meridians(longitude).
map.drawparallels(np.arange(-30.0,-10.0,0.5), color='white', linewidth=1.0, dashes=[1,0], labels=[1,1,0,0])
map.drawmeridians(np.arange(45.0,70.0,0.5), color='white', linewidth=1.0, dashes=[1,0], labels=[0,0,1,1])
map.drawmapboundary(fill_color='white')

map.pcolormesh(longitude, latitude, sum7, latlon=True, cmap='turbo' )
map.colorbar(pad=0.5)

print()


plt.show()
